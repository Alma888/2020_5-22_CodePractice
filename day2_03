# 2020_5-22_CodePractice

//数组中的逆序对：

//   有一组数，对于其中任意两个数组，若前面一个大于后面一个数字，则这
//       两个数字组成一个逆序对。请设计一个高效的算法，计算给定数组中的逆
//       序对个数。
//      给定一个int数组A和它的大小n，请返回A中的逆序对个数。保证n小于等于
//       5000.
//     【测试样例】 [1,2,3,4,5,6,7,0],8
//     【返回】          7

//【题目解析】：数组的逆序对考题较多，比如示例的数组：[1,2,3,4,5,6,7,0] 那么，
// 它包含逆序对有：{1,0},{2,0},{3,0},{4,0},{5,0},{6,0},{7,0}总共7个逆序对。
// 再比如数组{7,5,6,4}，逆序对总共有5对，{7,5},{7,6},{7,4},{5,4,{6,4}；

//【解题思路】：
// 思路1：暴力解法，顺序扫描整个数组，每扫描到一个数字的时候，
// 逐个比较该数字和它后面的数字的大小。如果后面的数字比它小，则这两个数字就组成一个逆序对。
// 假设数组中含有n个数字，由于每个数字都要和O(n)个数字作比较，因此这个算法的时间复杂度是O(n2)。

//思路2：分治思想，采用归并排序的思路来处理，如下图，先分后治：先把数组分隔成子数组，先统计出子数组内
//部的逆序对的数目，然后再统计出两个相邻子数组之间的逆序对的数目。在统计逆序对的过程中，还需要对数组进
//行排序，其实这个排序过程就是归并排序的思路 .
//逆序对的总数=左边数组中的逆序对的数量+右边数组中逆序对的数量+左右结合成新的顺序数组时中出现的逆序对
//的数量；



//思路2：分治思想，采用归并排序的思路来处理
public class day2_03 {

    public static int Count(int[] A,int n){
        if(A==null||n==0){
            return 0;
        }
        return mergeSort(A,0,A.length);
    }
    // [low, high)
    private static int mergeSort(int[] a,int low,int high){
        if(low>=high-1){
            return 0;
        }
        int mid=(low+high)/2;
        // [low, mid)
        // [mid, high)
        //逆序对的总数=左边数组中的逆序对的数量+右边数组中逆序对的数量
        //             +左右结合成新的顺序数组时中出现的逆序对的数量；
        return mergeSort(a,low,mid)+mergeSort(a,mid,high)+merge(a,low,mid,high);
    }

    private static int merge(int[] a,int low,int mid,int high){
        int len=high-low;
        int[] extra=new int[len];
        int i=low;
        int j=mid;
        int k=0;

        int inverseNum = 0;// 新增，用来累加数组逆序对
        while(i<mid && j<high){
            if(a[i]<=a[j]){
                extra[k++]=a[i++];
            }else{
                // 当前一个数组元素大于后一个数组元素时，累加逆序对
                // s[i] > s[j] 推导出 s[i]...s[mid] > s[j]
                inverseNum+=mid-i;
                extra[k++]=a[j++];
            }
        }
        while(i<mid){
            extra[k++]=a[i++];
        }
        while(j<high){
            extra[k++]=a[j++];
        }
        for(int x=0;x<len;x++){
            a[low+x]=extra[x];
        }
        return inverseNum;
    }
    public static void main(String[] args) {
        int[] a={1,2,3,4,5,6,7,0};
        System.out.println(Count(a,a.length));
    }
}
